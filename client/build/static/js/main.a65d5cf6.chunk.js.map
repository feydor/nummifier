{"version":3,"sources":["elements/Button/Button.module.css","components/Description/Description.module.css","components/TicXenotation/TicXenotation.module.css","images/torus-pink.gif","algorithims/gematria/ciphers.js","algorithims/gematria/nummifier.js","algorithims/ticxenotation/ticxenotation.js","images/torus-inv.png","components/Header/Header.js","components/QueryBar/QueryBar.js","components/Glossary/Glossary.js","components/Reductions/Reductions.js","components/Footer/Footer.js","containers/App/App.js","components/Description/Description.js","components/TicXenotation/TicXenotation.js","reportWebVitals.js","index.js"],"names":["module","exports","ALPHANUM","range","start","end","step","Array","Math","ceil","fill","map","x","y","ciphers","AQ","GoN1","GoN2","GoN3","gematria","str","toUpperCase","i","includes","push","indexOf","container","key","cipher","sum","j","this","reduce","num","arr","nestedparsedArr","toString","elem","flippedSignNum","concat","join","slice","forEach","char","parseInt","acc","curr","nummificate","query","ciph","method","res","primes","sieve","MAX","convert","n","isNaN","RangeError","alphaToTx","stringify","factors","f","smallestFactor","factor","indexOfPrime","isArray","prev","floor","sqrt","length","a","filter","PADDING_TOP","CipherSetting","label","onChangeHandler","defaultChecked","Form","Check","type","id","className","onChange","toggleSettings","settings","document","getElementById","style","display","paddingTop","Header","props","Navbar","expand","Brand","href","alt","src","logo","Toggle","onClick","Collapse","Container","fluid","Row","QueryBar","handleClear","console","log","value","handleQueryClear","name","size","inputMaxLength","maxLength","onKeyUp","handleQueryKeyUp","onKeyDown","handleQueryKeydown","autoComplete","Button","styles","handleSaveWord","disabled","Glossary","glossary","word","Reductions","pendingInput","ReductionsJsx","selectedCiphers","val","useEffect","Footer","gTypingTimer","Description","children","TicXenotation","Object","keys","getTics","tic","App","state","isTyping","loading","error","handleSelectedCiphersChange","e","isChecked","target","checked","newState","setState","setGlossary","queries","url","replace","fetch","headers","then","json","response","status","Error","statusTxt","catch","reductions","body","JSON","data","clearTimeout","setTimeout","handleQueryChange","handleQueryKeyDown","match","tics","TX","content","torus","color","height","width","timeout","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a65d5cf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3kbxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Description\":\"Description_Description__1gc3z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TicXenotation\":\"TicXenotation_TicXenotation__2aZAs\"};","export default __webpack_public_path__ + \"static/media/torus-pink.c5c7790a.gif\";","/* ciphers.js */\nexport const ALPHANUM = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n/**\n * like range() in python\n * @param {number} start - inclusive\n * @param {number} end - exclusive\n * @param {number} step - optional, defaults to 1\n * @return {array} starting from 'start' and ending at 'end', inclusive\n */\nexport function range(start, end, step = 1) {\n  return Array(Math.ceil((end - start) / step))\n    .fill(start)\n    .map((x, y) => x + y * step);\n}\n\nconst ciphers = {\n  AQ: range(0, 36),\n  // AZ source: https://web.archive.org/web/20070701190937/http://www.songofazrael.org/azrael-1.html\n  // AZ: [...range(9, 1, -1), ...[9], ...range(1, 9)]\n  // GoN source: https://eianorange.zenseiderz.org/gon/\n  GoN1: [...range(0, 10), ...range(13, -13, -1)],\n  GoN2: [...range(0, 10), ...range(13, 0, -1), ...range(-1, -14, -1)],\n  GoN3: [\n    ...range(0, 10),\n    ...[\n      1,\n      -10,\n      7,\n      -3,\n      -13,\n      -9,\n      6,\n      -2,\n      12,\n      -8,\n      5,\n      -1,\n      11,\n      4,\n      -7,\n      -13,\n      10,\n      -6,\n      3,\n      -12,\n      9,\n      -5,\n      2,\n      -11,\n      8,\n      -4,\n    ],\n  ],\n};\n\n/**\n * nine twin-summing\n * @param {string} str\n * @return {Object} { \"AQ\": { method:string, sum:function }, ... }\n * NOTE: sum is returned as a function for individual, on-demand computation\n */\nexport function gematria(str) {\n  let map = [];\n\n  // maps str to indices of ALPHANUM\n  for (let i of str.toUpperCase()) {\n    if ([...ALPHANUM].includes(i)) map.push([...ALPHANUM].indexOf(i));\n  }\n\n  // sums map-cipher mapped values for each cipher\n  let container = {};\n  for (let key in ciphers) {\n    container[key] = {\n      cipher: key,\n      sum: function () {\n        let sum = 0;\n        for (let j of map) sum += ciphers[this.cipher][j];\n        return sum;\n      },\n    };\n  }\n\n  return container;\n}\n\nexport function run_gematria() {\n  for (let itr in gematria(\"aoe\")) {\n    console.log(itr);\n  }\n}\n","/* nummifier.js - digital reduction algorithm */\nimport * as ciph from './ciphers.js';\n// import { gematria } from './ciphers.js';\n\n/**\n * full digital reduction of any query string using ciphers.gematria() function\n * @param {string} query\n * @return {Object} { 'AQ': { method:string, reduce: [numbers] } }\n */\nfunction nummificate(query) {\n  let ciphers = ciph.gematria(query);\n\n  let container = {};\n  for (let key in ciphers) {\n    container[key] = {\n      method: key,\n      reduce: function () {\n        let acc = ciphers[key].sum(); // initialize acc with first reduction\n        let res = [acc]; // results\n\n        // reduce until single digit, keep track of reductions\n        while (acc >= 10) {\n          acc = reduce(acc);\n          res.push(acc);\n        }\n\n        return res;\n      },\n    };\n  }\n\n  return container;\n}\n\n/**\n * reduces an n digit number by summation\n * @param {number} num\n * @return {number}\n * @example 78 => 15, 9999 => 36\n */\nfunction reduce(num) {\n  let arr = [];\n  // stringify num and spread into an array,\n  // split each char into a separate nested array,\n  // parse ints and push into arr\n  let parsedArr = [...num.toString()];\n  let nestedparsedArr = parsedArr.map((elem) => {\n    return [elem];\n  });\n  // takes the first two elements (the leading digit and the number's sign)\n  // and concatenates them at the front of the array\n  // example input: -123\n  if (num < 0) {\n    let flippedSignNum = nestedparsedArr[0].concat(nestedparsedArr[1]).join(\"\"); // output: \"-1\"\n    nestedparsedArr = nestedparsedArr.slice(2); // slice off the first two characters\n    nestedparsedArr = [flippedSignNum, ...nestedparsedArr]; // attach flippedSign to nestedArr\n  }\n  nestedparsedArr.forEach((char) => {\n    arr.push(parseInt(char));\n  });\n  // sum up the digits in arr\n  return arr.reduce((acc, curr) => {\n    return acc + curr;\n  });\n}\n\nexport default nummificate;\n","/* ticxenotation.js - functions for conversion to Tic-Xenotation\n * for specifications see:\n * https://mvupress.net/tic-xenotation/\n * prime factorization functions based on:\n * https://www.nayuki.io/res/calculate-prime-factorization-javascript\n * TX functions based on:\n * https://mvupress.net/txconverter.html\n */\n\n/* globals */\nlet primes = [];\nprimes = sieve(5);\nconst MAX = 4294967296;\n\n/**\n * interface/entry point\n * see alphaToTx for details\n */\nexport function convert(n) {\n  if (!n || isNaN(n) || n < 0 || n >= MAX) throw new RangeError(\"Argument is invalid\");\n  return alphaToTx(n).map(stringify).join('');\n}\n\n/**\n * Returns the Tic-Xenotation overcoding of n\n * @param {number} n\n * @return {string} tx\n * @throws RangeError if n is NaN or out of range (0, MAX)\n * @example:\n * - alphaToTx(5) = '((:))'\n * - alphaToTx(1) = ':(-P)'\n */\nexport function alphaToTx(n) {\n  if (n < 2) return [''];\n  const factors = factor(n);\n  \n  return factors.map(f => f == 2 ? ':' : alphaToTx(indexOfPrime(f)));\n}\n\n/**\n * Returns a tic-cluster wrapped in a implextion\n * @param {array} arr\n * @example:\n * - stringify(['::']) = ['(::)']\n */\nexport const stringify = arr => {\n  if (Array.isArray(arr)) {\n    return `(${ arr.reduce((prev, curr) => prev + stringify(curr), '') })`;\n  }\n  return arr;\n}\n\n/*\n * Returns the prime factorization of n\n * @param {number} n\n * @return {array} factors\n * @example:\n * - factor(60) = [2, 2, 3, 5]\n */\nexport function factor(n) {\n  let factors = [];\n  if (!n || isNaN(n) || n < 1 || n >= MAX ) {\n    return factors;\n  }\n\n  while (n != 1) {\n    let f = smallestFactor(n);\n    factors.push(f);\n    n /= f;\n  }\n  \n  return factors;\n}\n\n/*\n * Returns the smallest prime factor of n\n * @param {number} - n\n * @throws RangeError when n < 2\n * @example:\n * - smallestFactor(15) = 3\n * - smallestFactor(16) = 2\n */\nfunction smallestFactor(n) {\n  if (n < 2) throw new RangeError(\"Argument must be 2 or greater.\");\n  if (n % 2 === 0) return 2;\n  \n  let end = Math.floor(Math.sqrt(n));\n  \n  for (let i = 3; i <= end; i += 2) {\n    if (n % i === 0) return i;\n  }\n\n  return n;\n}\n\n/**\n * Returns the prime factorization as factor-power pairs\n * @param {array} factors\n * @example:\n * - factorPowers([3, 5]) = [[3, 1], [5, 1]]\n * - factorPowers([2, 2, 3, 3]) = [[2, 2], [3, 2]]\n */\nfunction factorPowers(factors) {\n  let results = [];\n  let prevFactor = factors[0];\n  let count = 1;\n\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] === prevFactor) {\n      count++;\n    } else {\n      results.push([prevFactor, count]);\n      prevFactor = factors[i];\n      count = 1;\n    }\n  }\n\n  results.push([prevFactor, count]);\n  return results;\n}\n\n/*\n * Returns all prime numbers from 2 through n\n * @param {number} n\n * @return {array} \n * @example:\n * - sieve(5) = [2, 3, 5]\n * - sieve(29) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n */\nfunction sieve(n) {\n  if (primes[primes.length - 1] >= n) return primes;\n  const a = new Array(n + 1).fill(0);\n\n  for (let i = 2; i < a.length; i++) {\n    for (let j = i * 2; j < a.length; j += i) {\n      a[j] = 1;\n    }\n  }\n\n  primes = a.map((n, i) => !n ? i : 0).filter(n => n).slice(1);\n  return primes;\n}\n\n/**\n * returns the index of n on the prime number line\n * @param {number} n\n * @example:\n * - indexOfPrime(7) = 4\n * - indexOfPrime(53) = 16\n */\nexport function indexOfPrime(n) {\n  if (n < 2) throw new RangeError(\"Argument must be 2 or greater.\");\n  if (primes.includes(n)) return primes.indexOf(n) + 1;\n  return sieve(n).indexOf(n) + 1;\n}\n","export default __webpack_public_path__ + \"static/media/torus-inv.384627eb.png\";","import Navbar from \"react-bootstrap/Navbar\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Gear } from \"react-bootstrap-icons\";\nimport logo from \"../../images/torus-inv.png\";\n\nimport \"./Header.css\";\n  \n// constants\nconst PADDING_TOP = \"10vh\";\n\n/**\n * a header with slidedown settings\n */\nconst Header = (props) => {\n\n  return (\n    <header>\n      <Navbar expand=\"true\" className=\"fixed-top\">\n        <Navbar.Brand href=\"#top\">\n          <img alt=\"logo\" src={logo} className=\"d-inline-block align-top\" />{\" \"}\n        </Navbar.Brand>\n\n        <Navbar.Brand href=\"#top\">\n          <p>ANS</p>\n        </Navbar.Brand>\n\n        <Navbar.Toggle onClick={toggleSettings}>\n          <Gear />\n        </Navbar.Toggle>\n      </Navbar>\n\n      <Navbar.Collapse id=\"basic-navbar-nav\" style={{ display: \"none\", paddingTop: PADDING_TOP }}>\n        <Container fluid id=\"settings\" className=\"justify-content-center\">\n          <Row>\n            <h5>Ciphers: </h5>\n            <Form>\n              <CipherSetting\n                label=\"AQ\"\n                onChangeHandler={props.onChangeHandler}\n                defaultChecked={true}\n              />\n            </Form>\n            <Form>\n              <CipherSetting\n                label=\"GoN1\"\n                onChangeHandler={props.onChangeHandler}\n                defaultChecked={false}\n              />\n            </Form>\n          </Row>\n        </Container>\n      </Navbar.Collapse>\n    </header>\n  );\n};\n\n/**\n * A checkbox element that calls the 'onChangeHandler' param on click\n * @param {string} label - id and label\n * @param {function} setState - a setState function from react\n * class is set to 'cipher-setting'\n */\nconst CipherSetting = ({ label, onChangeHandler, defaultChecked }) => {\n  return (\n    <Form.Check\n      type=\"switch\"\n      id={label}\n      label={label}\n      className=\"cipher-setting\"\n      onChange={onChangeHandler}\n      defaultChecked={defaultChecked}\n    />\n  );\n};\n\n/**\n * toggles the slide-down settings area\n */\nfunction toggleSettings() {\n  let settings = document.getElementById(\"basic-navbar-nav\");\n  if (settings.style.display === \"none\") {\n    settings.style.display = \"\";\n    // remove padding from div#container\n    document.getElementById(\"container\").style.paddingTop = 0;\n  } else {\n    settings.style.display = \"none\";\n    // return padding to div#container\n    document.getElementById(\"container\").style.paddingTop = PADDING_TOP;\n  }\n\n}\n\nexport default Header;\n","import \"./QueryBar.css\";\nimport Button from 'react-bootstrap/Button';\nimport styles from '../../elements/Button/Button.module.css';\n\n/**\n * sets the query state variable, POSTs a word on button press\n * @param {function} handleQueryChange\n * @param {function} handleSaveWord\n */\nfunction QueryBar(props) {\n  const inputMaxLength = 30;\n\n  const handleClear = () => {\n    console.log(document.getElementById(\"query-input\"));\n    document.getElementById(\"query-input\").value = \"\";\n    props.handleQueryClear();\n  }\n\n  return (\n    <div id=\"QueryBar\">\n      <h2>Query</h2>\n      <form>\n        <input\n          type=\"text\"\n          id={props.id}\n          name=\"query\"\n          size={inputMaxLength / 2}\n          maxLength={inputMaxLength}\n          onKeyUp={props.handleQueryKeyUp}\n          onKeyDown={props.handleQueryKeydown}\n          autoComplete=\"off\"\n        />\n        <br />\n        {props.query.length === 0 ? (\n          <div>\n          <Button className={styles.Button}\n            id=\"query-save-button\"\n            onClick={props.handleSaveWord}\n            disabled\n          >\n            INPUT\n          </Button>\n            <Button className={styles.Button} id=\"query-clear-button\" onClick={handleClear}>\n              CLEAR\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Button className={styles.Button} id=\"query-save-button\" onClick={props.handleSaveWord}>\n              SAVE\n            </Button>\n            <Button className={styles.Button} id=\"query-clear-button\" onClick={handleClear}>\n              CLEAR\n            </Button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n\nexport default QueryBar;\n","import \"./Glossary.css\";\nimport { useEffect } from \"react\";\n\n/**\n * fetches and displays a list of matching words from the server\n * @param {array} glossary\n * @param {string} query\n */\nfunction Glossary(props) {\n  // fetches a GET request on query or selectedCiphers state variable change\n  /*\n  useEffect(() => {\n    props.setGlossary();\n  }, [query, selectedCiphers]);\n  */\n\n  return (\n    <div className=\"Glossary\">\n      <h2>Hyperglossolalary</h2>\n      {props.glossary.length === 0 ? (\n        <div>Pending response...</div>\n      ) : (\n        props.glossary.map((word) => {\n          return (\n            <div key={word.toString()} className=\"GlossaryBar\">\n              {props.query.toUpperCase() + \"=\" + word.toUpperCase()}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n}\n\nexport default Glossary;\n","import { useEffect } from \"react\";\nimport \"./Reductions.css\";\n\n// re-renders on Query state change\n// assumes QueryBar us handling input stripping\nfunction Reductions(props) {\n  const { query } = props;\n  const pendingInput = <div>Pending input...</div>;\n\n  /**\n   * @return {string} res - a string of the following format:\n   * QUERY = AQ-99 = AQ-18 = AQ-9\n   */\n  const ReductionsJsx = () => {\n    let res = `${query.toUpperCase()} = `;\n\n    for (let cipher in props.ciphers) {\n      if (props.selectedCiphers[cipher]) {\n        for (let val of props.ciphers[cipher].reduce()) {\n          res += `${cipher}-${val} = `;\n        }\n      }\n    }\n    // remove the last two superflous characters;\n    res = res.slice(0, res.length - 2);\n    return res;\n  };\n\n  useEffect(() => {\n    //console.log(props.selectedCiphers)\n  }, [props.selectedCiphers]);\n\n  return (\n    <div className=\"Reductions\">\n      <h2>Digital Reduction</h2>\n      {query.length === 0 || !props.ciphers ? (\n        pendingInput\n      ) : (\n        <div id=\"digitalReductions\">\n          <ul id=\"reductionjsx\">\n            <ReductionsJsx />\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Reductions;\n","import \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <footer id=\"Footer\">\n      <p>&copy; 202X fedya</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport torus from \"../../images/torus-pink.gif\";\n\nimport nummificate from \"../../algorithims/gematria/nummifier\";\nimport * as TX from '../../algorithims/ticxenotation/ticxenotation';\n\nimport \"./App.css\";\n\n// components\nimport Header from \"../../components/Header/Header.js\";\nimport QueryBar from \"../../components/QueryBar/QueryBar.js\";\nimport Glossary from \"../../components/Glossary/Glossary.js\";\nimport Reductions from \"../../components/Reductions/Reductions.js\";\nimport Footer from \"../../components/Footer/Footer.js\";\nimport Description from \"../../components/Description/Description.js\";\nimport TicXenotation from \"../../components/TicXenotation/TicXenotation.js\";\n\n// globals\nlet gTypingTimer;\nconst gTypingInterval = 1000;\n\n// the webpage itself\nclass App extends React.Component {\n  state = {\n    glossary: [],\n    query: \"\",\n    isTyping: false,\n    selectedCiphers: { AQ: true, GoN1: false, GoN2: false, GoN3: false },\n    ciphers: {},\n    loading: false,\n    error: false,\n  };\n\n  /**\n   * toggles the selectedCiphers state object when a checkbox is clicked\n   * passed to Header\n   */\n  handleSelectedCiphersChange = (e) => {\n    let isChecked = document.getElementById(e.target.id).checked;\n    let newState = {};\n    let key = e.target.id;\n    newState[key] = isChecked;\n    this.setState(\n      {\n        selectedCiphers: { ...this.state.selectedCiphers, ...newState },\n      },\n      () => console.log(this.state.selectedCiphers)\n    );\n  };\n\n  /**\n   * handler function to set the glossary state variable\n   * sets the state variables: glossary, loading, and error\n   */\n  setGlossary = () => {\n    if (this.state.isTyping) return;\n\n    // for each cipher used, load the results into queries\n    let queries = [];\n    if (this.state.query.length !== 0) {\n      for (let cipher in this.state.ciphers) {\n        if (this.state.selectedCiphers[cipher]) {\n          queries = [...queries, ...this.state.ciphers[cipher].reduce()];\n        }\n      }\n    }\n\n    // append each dash-seperated query to url\n    let url = `/gematria/${queries.toString().replace(/,/g, \"-\")}`;\n\n    this.setState(\n      {\n        glossary: [],\n        loading: true,\n        error: false,\n        /**\n         * fetches the current glossary from the server\n         * @param {string} url - e.g. /gematria/140-5\n         * sets the state variables: glossary, loading, and error\n         */\n      },\n      function fetchGlossary() {\n        fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        })\n          .then((res) => res.json())\n          .then((response) => {\n            // throw error on non-200 status codes\n            if (response.status === 400)\n              throw new Error(`${response.status}: ${response.statusTxt}`);\n            console.log(\"Response (from GET):\");\n            console.log(response.glossary);\n\n            // filter out the query from the results\n            response.glossary = response.glossary.filter(\n              (word) => word !== this.state.query\n            );\n\n            this.setState({\n              glossary: response.glossary,\n              loading: false,\n            });\n          })\n          .catch((error) => {\n            console.error(error);\n            this.setState({\n              loading: false,\n              error: true,\n            });\n          });\n      }\n    );\n  };\n\n  /**\n   * saves this.state.query to server glossary\n   * sets the state variables: loading, error\n   */\n  handleSaveWord = () => {\n    console.log(\"handleSaveWord (this.state.query):\");\n    console.log(this.state.query);\n\n    // for each cipher used, load the results into reductions\n    let reductions = [];\n    for (let cipher in this.state.ciphers) {\n      if (this.state.selectedCiphers[cipher]) {\n        reductions = [...reductions, ...this.state.ciphers[cipher].reduce()];\n      }\n    }\n    console.log(reductions);\n\n    this.setState(\n      {\n        loading: true,\n        error: false,\n      },\n      function postWord() {\n        fetch(`/gematria`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            word: `${this.state.query}`,\n            reductions: reductions.toString(),\n          }),\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            console.log(data.status);\n            // status code is not 20X\n            if (data.status === 400) {\n              throw new Error(`${data.status}: ${data.statusTxt}`);\n            }\n\n            console.log(\"Success:\", data);\n            this.setState({\n              loading: false,\n            });\n          })\n          .catch((error) => {\n            console.error(\"Error:\", error);\n            this.setState({\n              loading: false,\n              error: true,\n            });\n          });\n      }\n    );\n  };\n\n  /**\n   * event handler for query change, onKeyUp\n   * sets a timer for 'typingInterval' ms\n   */\n  handleQueryKeyUp = () => {\n    clearTimeout(gTypingTimer);\n    gTypingTimer = setTimeout(this.handleQueryChange, gTypingInterval);\n  };\n\n  /**\n   * event handler for query change, onKeyDown\n   * resets the timer set by handleQueryKeyUp\n   * sets isTyping to true\n   */\n  handleQueryKeyDown = () => {\n    clearTimeout(gTypingTimer);\n    this.setState({\n      isTyping: true,\n    });\n  };\n\n  /**\n   * handler function for query change\n   * extracts input from onKeyUp event, strips it of invalid characters\n   * sets the state variables: query, ciphers, isTyping\n   */\n  handleQueryChange = () => {\n    // returns an array if query is not empty, else null\n    let query = document.getElementById(\"query-input\").value.match(/[A-Z]/gi);\n    query = !query ? \"\" : query.join(\"\"); // removes spaces, invalid characters, etc\n    if (query === null) query = \"\"; // query must never be null\n\n    // first set the query state, then the ciphers\n    this.setState(\n      {\n        query: query,\n        isTyping: false,\n      },\n      function setCiphers() {\n        this.setState({\n          ciphers: nummificate(query),\n        });\n      }\n      );\n    this.setGlossary();\n  };\n\n  handleQueryClear = () => {\n    this.setState({\n      query: \"\",\n      glossary: []\n    });\n  }\n  \n  /**\n   * Returns an array of TX encoded strings\n   * @example:\n   * - getTics() = ['(:)', ':::'], where ciphers['AQ'].reduce() = [3, 8]\n   */\n  getTics = () => {\n    let tics = [];\n    for (let cipher in this.state.ciphers) {\n      if (this.state.selectedCiphers[cipher]) {\n        tics = [...tics, ...this.state.ciphers[cipher].reduce()];\n      }\n    }\n\n    return tics.map(n => TX.convert(n));\n  }\n\n  render() {\n    let content = <img src={torus} alt=\"a picture of a torus\" />;\n    if (this.state.loading) {\n      content = <Loader \n        type=\"Grid\"\n        color=\"#ff0266\"\n        height={100}\n        width={100}\n        timeout={3000} />;\n    } else if (this.state.error) {\n      // TODO: <ErrorNotice onClickHandler={this.tryAgainHandler}/>\n      content = <h2>Error</h2>;\n    } else if (this.state.glossary.length > 0) {\n      content = (\n        <div>\n          <Reductions\n            query={this.state.query}\n            ciphers={this.state.ciphers}\n            selectedCiphers={this.state.selectedCiphers}\n          />\n          <TicXenotation \n            ciphers={this.state.ciphers}\n            getTics={this.getTics}\n          />\n          <Glossary\n            query={this.state.query}\n            glossary={this.state.glossary}\n          />\n        </div>\n      );\n    } else if (this.state.query !== \"\" && this.state.glossary.length === 0) {\n      content = (\n        <div>\n          <Reductions\n            query={this.state.query}\n            ciphers={this.state.ciphers}\n            selectedCiphers={this.state.selectedCiphers}\n          />\n          <TicXenotation \n            ciphers={this.state.ciphers}\n            getTics={this.getTics}\n          />\n        </div>\n      );\n\n    }\n\n    return (\n      <div className=\"baselevel\">\n        <Header onChangeHandler={this.handleSelectedCiphersChange} />\n        <div id=\"top\"></div>\n        <div id =\"container\" className=\"flex-column\" style={{ paddingTop: '10vh' }}>\n          <Container className=\"App shadow\">\n            <Row>\n              <h1 id=\"title\">Abysmal Nummification of the Signifier</h1>\n            </Row>\n            <Row className=\"main-content\">\n              {content}\n              <QueryBar\n                id=\"query-input\"\n                query={this.state.query}\n                handleQueryKeyUp={this.handleQueryKeyUp}\n                handleQueryKeyDown={this.handleQueryKeyDown}\n                handleSaveWord={this.handleSaveWord}\n                handleQueryClear={this.handleQueryClear}\n              />\n            </Row>\n            <Row>\n              <Description>\n                <h4>Instructions</h4>\n                <p>Enter your query above. Select the desired cipher from the settings.</p>\n              </Description>\n            </Row>\n          </Container>\n\n          <Container>\n            <Description>\n              <h2>Gematrixography for the Perplexed</h2>\n              <h3>Digital Reduction, or Plexing</h3>\n              <p>Plexing is the act of reducing a number from an <code>n</code>-digit number to a single-digit number via accumulation (<code>418 = 13 = 4</code>). The act of a number 'collapsing into itself' continously reintroduces the problematic of overcoding. That semiotics is 'always already cryptography' is plexing's original and only Weltanschauung. To reduce further, into its contituent <code>1</code>'s (its 'tics') would fall under the category of Tic-Xenotation. </p>\n              <h3>Tic-Xenotation</h3>\n              <p>A numerical system developed by Dr. D.C. Barker wherein notation and arithemtical operation is reduced to the concepts of tic-clusters (<code>:</code>) and implextions (<code>()</code>). Primes constitute a magnitude value (the absolute value) and an ordinate value (its place on the prime number line), thus primes can be represented as tic-clusters and further implextions of tic-clusters (<code>32 = 2<sup>5</sup> = :::::</code>). Implextion is the operation of transforming a magnitude into an ordinate value (<code>11 = 5<sup>th</sup> prime = (((((:))))); (11) = ((((((:)))))) = 6<sup>th</sup> prime=13</code>) Non-primes can also be implexted (<code>8 = :::; (8) = (:::) = 8<sup>th</sup> prime=19</code>); and compounds are products of their prime factors (<code>15 = 5 x 3 = 3<sup>rd</sup> prime x 2<sup>nd</sup> prime = ((:))(:)</code>). Finally to constitute <code>1</code> and <code>0</code>, there is the deplextion operator (<code>-P</code>), which decreases a TX-value's ordinate value (<code>1 = (-P):; 0 = ((-P)):</code>).</p>\n              <h3>Qabbala</h3>\n              <p>A class of 'rigourously constructible procedures' intended to explicate a 'signal from the Outside' in which discovering and correcting 'formal errors' are a 'procedural requirement' intended for its 'continued development'. Roughly equivalent to the bio-scientific pursuit for epistimological verification, Qabbala's gnoetic goals are distinguishable from its 'verifiable' content in much the same way as the theory of causality stands to a plain, 'transcendently aware' description of events. To have reached the level of certainty at the 'procedural-problematic' level is to have said enough. Anything further, and it would have to be classified in that unfortunate grouping of ideas whose forms are beautiful but whose content remains empty sophistry.</p>\n              \n              <footer><em>Quotations taken from COLLAPSE I, ed. R. Mackay (Oxford: Urbanomic, September 2007)</em></footer>\n            </Description>\n          </Container>\n\n          <h2>———</h2>\n\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import style from './Description.module.css';\n\nconst Description = (props) => {\n    return (\n        <article className={style.Description}>\n          {props.children}\n        </article>\n    );\n};\n\nexport default Description;\n","import styles from './TicXenotation.module.css';\n\nconst TicXenotation = (props) => {\n  return (\n    <div className={styles.TicXenotation}>\n      <h2>Tic-Xenotation</h2>\n      <p>\n        {props.ciphers && Object.keys(props.ciphers).length > 0 \n          ? props.getTics().map(tic => <span key={tic}>{tic} </span>) : \"\"}\n      </p>\n    </div>\n  );\n};\n\nexport default TicXenotation;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}